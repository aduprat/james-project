{"swagger":"2.0","info":{"description":"All the web administration API for JAMES","version":"V1.0","title":"JAMES Web Admin API"},"host":"localhost:8000","tags":[{"name":"Domains"},{"name":"Tasks"},{"name":"MailQueues"},{"name":"Mailbox merging route for fixing Ghost mailbox bug described in MAILBOX-322"},{"name":"Address Groups"},{"name":"Cassandra migration"},{"name":"MailRepositories"},{"name":"User's Mailbox"},{"name":"Users"},{"name":"GlobalQuota"}],"schemes":["http","https"],"consumes":["application/json"],"produces":["application/json"],"paths":{"/:cassandra/mailbox/merging":{"post":{"tags":["Mailbox merging route for fixing Ghost mailbox bug described in MAILBOX-322"],"summary":"Triggers the merge of 2 mailboxes. Old mailbox Id will no more be accessible, rights and messages will be merged.","operationId":"mergeMailboxes","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}},{"in":"body","name":"body","description":"The mailboxes to merge together.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object"}},"201":{"description":"The taskId of the given scheduled task","schema":{"$ref":"#/definitions/TaskIdDto"}},"400":{"description":"Error with supplied data (JSON parsing or invalid mailbox ids)"}}}},"/:cassandra/version":{"get":{"tags":["Cassandra migration"],"summary":"Getting the current version used by Cassandra schema","operationId":"getCassandraCurrentVersion","produces":["application/json"],"responses":{"200":{"description":"The current version of the schema","schema":{"$ref":"#/definitions/CassandraVersionResponse"}}}}},"/:cassandra/version/latest":{"get":{"tags":["Cassandra migration"],"summary":"Getting the latest version available for Cassandra schema","operationId":"getCassandraLatestVersion","produces":["application/json"],"responses":{"200":{"description":"The latest version of the schema","schema":{"$ref":"#/definitions/CassandraVersionResponse"}}}}},"/:cassandra/version/upgrade":{"post":{"tags":["Cassandra migration"],"summary":"Triggers a migration of Cassandra schema to a specific version","operationId":"upgradeToVersion","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}},{"in":"body","name":"body","description":"The schema version to upgrade to.","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object"}},"201":{"description":"The taskId of the given scheduled task","schema":{"$ref":"#/definitions/TaskIdDto"}},"409":{"description":"Migration can not be done"}}}},"/:cassandra/version/upgrade/latest":{"post":{"tags":["Cassandra migration"],"summary":"Triggers a migration of Cassandra schema to the latest available","operationId":"upgradeToLatest","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object"}},"201":{"description":"The taskId of the given scheduled task","schema":{"$ref":"#/definitions/TaskIdDto"}},"409":{"description":"Migration can not be done"}}}},"/:task":{"get":{"tags":["Tasks"],"summary":"Listing tasks","operationId":"list","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"A specific class execution details","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"The provided payload is invalid (JSON error or invalid status)"},"404":{"description":"The taskId is not found"}}}},"/:task/{taskId}":{"get":{"tags":["Tasks"],"summary":"Getting a task execution details","operationId":"getStatus","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"A specific class execution details","schema":{"$ref":"#/definitions/ExecutionDetailsDto"}},"400":{"description":"The taskId is invalid"},"404":{"description":"The taskId is not found"}}},"delete":{"tags":["Tasks"],"summary":"Cancel a given task","operationId":"cancel","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object"}},"400":{"description":"The taskId is invalid"},"204":{"description":"Task is cancelled"}}}},"/:task/{taskId}/await":{"get":{"tags":["Tasks"],"summary":"Await, then get a task execution details","operationId":"await","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"A specific class execution details","schema":{"$ref":"#/definitions/ExecutionDetailsDto"}},"400":{"description":"The taskId is invalid"},"404":{"description":"The taskId is not found"}}}},"/address/groups/address/groups":{"get":{"tags":["Address Groups"],"summary":"getting groups list","operationId":"listGroups","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/address/groups/address/groups/{groupAddress}":{"get":{"tags":["Address Groups"],"summary":"listing group members","operationId":"listGroupMembers","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}},{"name":"groupAddress","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"The group is not an address"},"500":{"description":"Internal server error - Something went bad on the server side."},"404":{"description":"The group does not exist"}}}},"/address/groups/address/groups/{groupAddress}/{userAddress}":{"put":{"tags":["Address Groups"],"summary":"adding a member into a group","operationId":"addToGroup","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}},{"name":"groupAddress","in":"path","description":"Mail address of the group. Sending a mail to that address will send it to all group members.\nNote that email addresses are restricted to ASCII character set. Mail addresses not matching this criteria will be rejected.","required":true,"type":"string"},{"name":"userAddress","in":"path","description":"Mail address of the group. Sending a mail to the group mail address will send an email to that email address (as well as other members).\nNote that email addresses are restricted to ASCII character set. Mail addresses not matching this criteria will be rejected.","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"groupAddress or group structure format is not valid"},"500":{"description":"Internal server error - Something went bad on the server side."},"403":{"description":"server doesn't own the domain"},"409":{"description":"requested group address is already used for another purpose"}}},"delete":{"tags":["Address Groups"],"summary":"remove a member from a group","operationId":"removeFromGroup","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Request"}},{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Response"}},{"name":"groupAddress","in":"path","required":true,"type":"string"},{"name":"userAddress","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"groupAddress or group structure format is not valid"},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/domains":{"get":{"tags":["Domains"],"summary":"Getting all domains","operationId":"defineGetDomains","produces":["application/json"],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}}}}},"/domains/{domainName}":{"get":{"tags":["Domains"],"summary":"Testing existence of a domain.","operationId":"defineDomainExists","produces":["application/json"],"parameters":[{"name":"domainName","in":"path","required":true,"type":"string"}],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The domain exists","schema":{"type":"string"}},"404":{"description":"The domain does not exist."}}},"put":{"tags":["Domains"],"summary":"Creating new domain","operationId":"defineAddDomain","produces":["application/json"],"parameters":[{"name":"domainName","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid request for domain creation"},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. New domain is created."}}},"delete":{"tags":["Domains"],"summary":"Deleting a domain","operationId":"defineDeleteDomain","produces":["application/json"],"parameters":[{"name":"domainName","in":"path","required":true,"type":"string"}],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. Domain is removed."}}}},"/mailQueues":{"get":{"tags":["MailQueues"],"summary":"Listing existing MailQueues","operationId":"defineListQueues","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Service"}}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/mailQueues/{mailQueueName}":{"get":{"tags":["MailQueues"],"summary":"Get a MailQueue details","operationId":"getMailQueue","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Service"}},{"name":"mailQueueName","in":"path","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/MailQueueDTO"}},"400":{"description":"Invalid request for getting the mail queue."},"500":{"description":"Internal server error - Something went bad on the server side."},"404":{"description":"The MailQueue does not exist."}}}},"/mailQueues/{mailQueueName}/mails":{"get":{"tags":["MailQueues"],"summary":"List the mails of the MailQueue","operationId":"listMails","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Service"}},{"name":"mailQueueName","in":"path","required":true,"type":"string"},{"name":"delayed","in":"query","description":"Whether the mails are delayed in the mail queue or not (already sent).","required":false,"type":"boolean","x-example":"?delayed=true"},{"name":"limit","in":"query","description":"Limits the maximum number of mails returned by this endpoint","required":false,"type":"int","default":"100","x-example":"?limit=100"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"Invalid request for listing the mails from the mail queue."},"500":{"description":"Internal server error - Something went bad on the server side."},"404":{"description":"The MailQueue does not exist."}}},"delete":{"tags":["MailQueues"],"summary":"Delete mails from the MailQueue","operationId":"deleteMails","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Service"}},{"name":"mailQueueName","in":"path","required":true,"type":"string"},{"name":"sender","in":"query","description":"The sender of the mails to be deleted should be equals to this query parameter.","required":false,"type":"MailAddress","x-example":"?sender=sender@james.org"},{"name":"name","in":"query","description":"The name of the mails to be deleted should be equals to this query parameter.","required":false,"type":"String","x-example":"?name=mailName"},{"name":"recipient","in":"query","description":"The recipients of the mails to be deleted should contain this query parameter.","required":false,"type":"MailAddress","x-example":"?recipient=recipient@james.org"}],"responses":{"400":{"description":"Invalid request for deleting mails from the mail queue."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK, the request is being processed"},"404":{"description":"The MailQueue does not exist."}}},"patch":{"tags":["MailQueues"],"summary":"Force delayed mails delivery","operationId":"forceDelayedMailsDelivery","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":false,"schema":{"$ref":"#/definitions/Service"}},{"name":"mailQueueName","in":"path","required":true,"type":"string"},{"name":"delayed","in":"query","description":"Whether the mails are delayed in the mail queue or not (already sent).","required":false,"type":"boolean","x-example":"?delayed=true"}],"responses":{"400":{"description":"Invalid request for getting the mail queue."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK"},"404":{"description":"The MailQueue does not exist."}}}},"/mailRepositories":{"get":{"tags":["MailRepositories"],"summary":"Listing all mail repositories URLs","operationId":"defineGetMailRepositories","produces":["application/json"],"responses":{"200":{"description":"Listing all mail repositories URLs","schema":{"type":"array","items":{"type":"object"}}},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/mailRepositories/{encodedUrl}":{"get":{"tags":["MailRepositories"],"summary":"Reading the information of a repository, such as size (can take some time to compute)","operationId":"defineGetMailRepository","produces":["application/json"],"responses":{"200":{"description":"The repository information","schema":{"type":"array","items":{"type":"object"}}},"500":{"description":"Internal server error - Something went bad on the server side."},"404":{"description":"The repository does not exist","schema":{"$ref":"#/definitions/ErrorResponder"}}}}},"/mailRepositories/{encodedUrl}/mails":{"get":{"tags":["MailRepositories"],"summary":"Listing all mails in a repository","operationId":"defineListMails","produces":["application/json"],"responses":{"200":{"description":"The list of all mails in a repository","schema":{"type":"array","items":{"type":"object"}}},"400":{"description":"Bad request - invalid parameter"},"500":{"description":"Internal server error - Something went bad on the server side."},"404":{"description":"The repository does not exist","schema":{"$ref":"#/definitions/ErrorResponder"}}}},"delete":{"tags":["MailRepositories"],"summary":"Deleting all mails in that mailRepository","operationId":"defineDeleteAll","produces":["application/json"],"responses":{"201":{"description":"All mails are deleted","schema":{"$ref":"#/definitions/TaskIdDto"}},"400":{"description":"Bad request - unknown action"},"500":{"description":"Internal server error - Something went bad on the server side."}}},"patch":{"tags":["MailRepositories"],"summary":"Reprocessing all mails in that mailRepository","operationId":"defineReprocessAll","produces":["application/json"],"responses":{"201":{"description":"Task is created","schema":{"$ref":"#/definitions/TaskIdDto"}},"400":{"description":"Bad request - unknown action"},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/mailRepositories/{encodedUrl}/mails/{key}":{"patch":{"tags":["MailRepositories"],"summary":"Reprocessing a single mail in that mailRepository","operationId":"defineReprocessOne","produces":["application/json"],"responses":{"201":{"description":"Task is created","schema":{"$ref":"#/definitions/TaskIdDto"}},"400":{"description":"Bad request - unknown action"},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/mailRepositories/{encodedUrl}/mails/{mailKey}":{"delete":{"tags":["MailRepositories"],"summary":"Deleting a specific mail from that mailRepository","operationId":"defineDeleteMail","produces":["application/json"],"responses":{"200":{"description":"Mail is no more stored in the repository","schema":{"type":"array","items":{"type":"object"}}},"500":{"description":"Internal server error - Something went bad on the server side."}}}},"/quota":{"get":{"tags":["GlobalQuota"],"summary":"Reading count and size at the same time","description":"If there is no limitation for count and/or size, the returned value will be -1","operationId":"defineGetQuota","produces":["application/json"],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/QuotaDTO"}},"500":{"description":"Internal server error - Something went bad on the server side."}}},"put":{"tags":["GlobalQuota"],"summary":"Updating count and size at the same time","operationId":"defineUpdateQuota","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":true,"schema":{"$ref":"#/definitions/QuotaDTO"}}],"responses":{"400":{"description":"The body is not a positive integer or not unlimited value (-1)."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. The value has been updated."}}}},"/quota/count":{"get":{"tags":["GlobalQuota"],"summary":"Reading per quotaroot mail count limitation","operationId":"defineGetQuotaCount","produces":["application/json"],"responses":{"200":{"description":"OK","schema":{"type":"integer","format":"int64"}},"500":{"description":"Internal server error - Something went bad on the server side."}}},"put":{"tags":["GlobalQuota"],"summary":"Updating per quotaroot mail count limitation","operationId":"defineUpdateQuotaCount","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"400":{"description":"The body is not a positive integer."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. The value has been updated."}}},"delete":{"tags":["GlobalQuota"],"summary":"Removing per quotaroot mail count limitation by updating to unlimited value","operationId":"defineDeleteQuotaCount","produces":["application/json"],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The value is updated to unlimited value."}}}},"/quota/size":{"get":{"tags":["GlobalQuota"],"summary":"Reading per quotaroot mail size limitation","operationId":"defineGetQuotaSize","produces":["application/json"],"responses":{"200":{"description":"OK","schema":{"type":"integer","format":"int64"}},"500":{"description":"Internal server error - Something went bad on the server side."}}},"put":{"tags":["GlobalQuota"],"summary":"Updating per quotaroot mail size limitation","operationId":"defineUpdateQuotaSize","produces":["application/json"],"parameters":[{"in":"body","name":"body","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"400":{"description":"The body is not a positive integer."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. The value has been updated."}}},"delete":{"tags":["GlobalQuota"],"summary":"Removing per quotaroot mail size limitation by updating to unlimited value","operationId":"defineDeleteQuotaSize","produces":["application/json"],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The value is updated to unlimited value."}}}},"/users":{"get":{"tags":["Users"],"summary":"Getting all users","operationId":"defineGetUsers","produces":["application/json"],"responses":{"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK.","schema":{"$ref":"#/definitions/UserResponse"}}}}},"/users/{username}":{"put":{"tags":["Users"],"summary":"Creating an user","operationId":"defineCreateUser","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"},{"in":"body","name":"body","required":true,"schema":{"$ref":"#/definitions/AddUserRequest"}}],"responses":{"400":{"description":"Invalid input user."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. New user is added."}}},"delete":{"tags":["Users"],"summary":"Deleting an user","operationId":"defineDeleteUser","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid input user."},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. User is removed."}}}},"/users/{username}/mailboxes":{"get":{"tags":["User's Mailbox"],"summary":"Listing all mailboxes of user.","operationId":"defineGetUserMailboxes","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"}],"responses":{"401":{"description":"Unauthorized. The user is not authenticated on the platform","schema":{"type":"string"}},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The list of mailboxes","schema":{"type":"string"}},"404":{"description":"The user name does not exist."}}},"delete":{"tags":["User's Mailbox"],"summary":"Deleting user mailboxes.","operationId":"defineDeleteUserMailboxes","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"}],"responses":{"401":{"description":"Unauthorized. The user is not authenticated on the platform"},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The user does not have any mailbox","schema":{"type":"string"}},"404":{"description":"The user name does not exist."}}}},"/users/{username}/mailboxes/{mailboxName}":{"get":{"tags":["User's Mailbox"],"summary":"Testing existence of a mailbox.","operationId":"defineMailboxExists","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"},{"name":"mailboxName","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid mailbox name"},"401":{"description":"Unauthorized. The user is not authenticated on the platform"},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The mailbox exists","schema":{"type":"string"}},"404":{"description":"The user name does not exist."}}},"put":{"tags":["User's Mailbox"],"summary":"Create a mailbox of the selected user.","operationId":"CreateUserMailbox","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"},{"name":"mailboxName","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid mailbox name"},"401":{"description":"Unauthorized. The user is not authenticated on the platform"},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"OK. The mailbox now exists on the server.","schema":{"type":"string"}},"404":{"description":"The user name does not exist."}}},"delete":{"tags":["User's Mailbox"],"summary":"Deleting a mailbox and its children","operationId":"defineDeleteUserMailbox","produces":["application/json"],"parameters":[{"name":"username","in":"path","required":true,"type":"string"},{"name":"mailboxName","in":"path","required":true,"type":"string"}],"responses":{"400":{"description":"Invalid mailbox name"},"401":{"description":"Unauthorized. The user is not authenticated on the platform"},"500":{"description":"Internal server error - Something went bad on the server side."},"204":{"description":"The mailbox now does not exist on the server","schema":{"type":"string"}},"404":{"description":"The user name does not exist."}}}}},"definitions":{"HaltException":{"type":"object","properties":{"cause":{"$ref":"#/definitions/Throwable"},"stackTrace":{"type":"array","items":{"$ref":"#/definitions/StackTraceElement"}},"statusCode":{"type":"integer","format":"int32"},"body":{"type":"string"},"message":{"type":"string"},"localizedMessage":{"type":"string"},"suppressed":{"type":"array","items":{"$ref":"#/definitions/Throwable"}}}},"MailQueueDTO":{"type":"object","properties":{"name":{"type":"string"},"size":{"type":"integer","format":"int64"}}},"StaticFiles":{"type":"object"},"StackTraceElement":{"type":"object","properties":{"methodName":{"type":"string"},"fileName":{"type":"string"},"lineNumber":{"type":"integer","format":"int32"},"className":{"type":"string"},"nativeMethod":{"type":"boolean","default":false}}},"ErrorResponder":{"type":"object"},"ZoneOffset":{"type":"object","properties":{"totalSeconds":{"type":"integer","format":"int32"},"id":{"type":"string"},"rules":{"$ref":"#/definitions/ZoneRules"}}},"ZonedDateTime":{"type":"object","properties":{"offset":{"$ref":"#/definitions/ZoneOffset"},"zone":{"$ref":"#/definitions/ZoneId"},"hour":{"type":"integer","format":"int32"},"minute":{"type":"integer","format":"int32"},"second":{"type":"integer","format":"int32"},"nano":{"type":"integer","format":"int32"},"dayOfYear":{"type":"integer","format":"int32"},"dayOfWeek":{"type":"string","enum":["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]},"month":{"type":"string","enum":["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"]},"dayOfMonth":{"type":"integer","format":"int32"},"year":{"type":"integer","format":"int32"},"monthValue":{"type":"integer","format":"int32"},"chronology":{"$ref":"#/definitions/Chronology"}}},"QuotaDTO":{"type":"object","properties":{"count":{"type":"integer","format":"int64"},"size":{"type":"integer","format":"int64"}}},"CassandraVersionResponse":{"type":"object","properties":{"getversion":{"type":"integer","format":"int32"}}},"Chronology":{"type":"object","properties":{"calendarType":{"type":"string"},"id":{"type":"string"}}},"ZoneOffsetTransition":{"type":"object","properties":{"offsetBefore":{"$ref":"#/definitions/ZoneOffset"},"offsetAfter":{"$ref":"#/definitions/ZoneOffset"},"duration":{"$ref":"#/definitions/Duration"},"instant":{"$ref":"#/definitions/Instant"},"gap":{"type":"boolean","default":false},"overlap":{"type":"boolean","default":false},"dateTimeAfter":{"type":"string","format":"date-time"},"dateTimeBefore":{"type":"string","format":"date-time"}}},"AddUserRequest":{"type":"object","properties":{"password":{"type":"array","readOnly":true,"items":{"type":"string"}}}},"AdditionalInformation":{"type":"object"},"ZoneOffsetTransitionRule":{"type":"object","properties":{"month":{"type":"string","enum":["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"]},"timeDefinition":{"type":"string","enum":["UTC","WALL","STANDARD"]},"standardOffset":{"$ref":"#/definitions/ZoneOffset"},"offsetBefore":{"$ref":"#/definitions/ZoneOffset"},"offsetAfter":{"$ref":"#/definitions/ZoneOffset"},"dayOfWeek":{"type":"string","enum":["MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY"]},"dayOfMonthIndicator":{"type":"integer","format":"int32"},"localTime":{"$ref":"#/definitions/LocalTime"},"midnightEndOfDay":{"type":"boolean","default":false}}},"TaskIdDto":{"type":"object","properties":{"taskId":{"type":"string","format":"uuid"}}},"LocalTime":{"type":"object","properties":{"hour":{"type":"integer","format":"int32"},"minute":{"type":"integer","format":"int32"},"second":{"type":"integer","format":"int32"},"nano":{"type":"integer","format":"int32"}}},"ZoneId":{"type":"object","properties":{"rules":{"$ref":"#/definitions/ZoneRules"},"id":{"type":"string"}}},"TemporalUnit":{"type":"object","properties":{"duration":{"$ref":"#/definitions/Duration"},"durationEstimated":{"type":"boolean","default":false},"dateBased":{"type":"boolean","default":false},"timeBased":{"type":"boolean","default":false}}},"Instant":{"type":"object","properties":{"nano":{"type":"integer","format":"int32"},"epochSecond":{"type":"integer","format":"int64"}}},"Request":{"type":"object"},"Service":{"type":"object","properties":{"redirect":{"$ref":"#/definitions/Redirect"},"staticFiles":{"$ref":"#/definitions/StaticFiles"},"paths":{"type":"string"}}},"Duration":{"type":"object","properties":{"seconds":{"type":"integer","format":"int64"},"zero":{"type":"boolean","default":false},"negative":{"type":"boolean","default":false},"nano":{"type":"integer","format":"int32"},"units":{"type":"array","items":{"$ref":"#/definitions/TemporalUnit"}}}},"Redirect":{"type":"object"},"Response":{"type":"object"},"UserResponse":{"type":"object","properties":{"username":{"type":"string"}}},"ExecutionDetailsDto":{"type":"object","properties":{"taskId":{"type":"string","format":"uuid"},"additionalInformation":{"$ref":"#/definitions/AdditionalInformation"},"status":{"type":"string"},"submitDate":{"$ref":"#/definitions/ZonedDateTime"},"startedDate":{"$ref":"#/definitions/ZonedDateTime"},"completedDate":{"$ref":"#/definitions/ZonedDateTime"},"canceledDate":{"$ref":"#/definitions/ZonedDateTime"},"failedDate":{"$ref":"#/definitions/ZonedDateTime"},"type":{"type":"string"}}},"ZoneRules":{"type":"object","properties":{"fixedOffset":{"type":"boolean","default":false},"transitions":{"type":"array","items":{"$ref":"#/definitions/ZoneOffsetTransition"}},"transitionRules":{"type":"array","items":{"$ref":"#/definitions/ZoneOffsetTransitionRule"}}}},"Throwable":{"type":"object","properties":{"cause":{"$ref":"#/definitions/Throwable"},"stackTrace":{"type":"array","items":{"$ref":"#/definitions/StackTraceElement"}},"message":{"type":"string"},"localizedMessage":{"type":"string"},"suppressed":{"type":"array","items":{"$ref":"#/definitions/Throwable"}}}}}}