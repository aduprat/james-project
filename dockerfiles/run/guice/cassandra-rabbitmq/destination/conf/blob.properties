# ============================================= BlobStore Implementation ==================================
# Read https://james.apache.org/server/config-blobstore.html for further details

# Choose your BlobStore implementation
# Mandatory, allowed values are: cassandra, objectstorage, hybrid (deprecated)
# hybrid is using both objectstorage for unfrequently read or big blobs & cassandra for small, often read blobs
# Deprecated. Use CachedBlobStore instead. Introduced to fasten small blob access, its usage could be compared
# to a cache, but with a sub-optimal implementation (no eviction, default replication factor, no  circuit breaking).
implementation=objectstorage

# ========================================= Cassandra BlobStore Cache ======================================
# A cassandra cache can be enabled to reduce latency when reading small blobs frequently
# A dedicated keyspace with a replication factor of one is then used
# Cache eviction policy is TTL based
# Only blobs below a given threshold will be stored.
# To be noted that blobs are stored within a single Cassandra row, hence a low threshold should be used.

# Enable the cache? Optional and default to false. Must be a boolean.
cache.enable=false

# Cache eviction policy is TTL based. Optional and defaults to 7 days. Must be a duration.
# Valid units: ms, sec, min, hour, day, week, month, year
# cache.cassandra.ttl=7days

# Timeout after which this cache should be bypassed. Optional and defaults to 100ms. Can not exceed 1 hour.
# Must be a duration Valid units: ms, sec, min, hour, day, week, month, year
# cache.cassandra.timeout=100ms

# Maximum size of stored objects expressed in bytes. Must be strictly positive. Defaults to 8192.
# Units: bytes, Kib, MiB, GiB, TiB
# cache.sizeThresholdInBytes=8 KiB

# ========================================= Hybrid BlobStore ======================================
# hybrid is using both objectstorage for unfrequently read or big blobs & cassandra for small, often read blobs
# Size threshold for considering a blob as 'big', causing it to be saved in the low cost blobStore
# Optional, defaults to 32768 bytes (32KB), must be positive
hybrid.size.threshold=32768

# ============================================== ObjectStorage ============================================

# ========================================= ObjectStorage Codec ======================================
# Codec for blob contents
# Mandatory, allowed values are: DEFAULT, AES256
# DEFAULT: no encryption
# AES256: AES-256 encryption
objectstorage.payload.codec=DEFAULT

# ===================================== ObjectStorage AES256 Encryption ====================================
# Mandatory if you choose AES256 encryption, salt value in string for the encryption
# objectstorage.aes256.hexsalt=salt

# Mandatory if you choose AES256 encryption, password for the encryption
# objectstorage.aes256.password=password

# ========================================= ObjectStorage providers ========================================
# Choosing blob storage service
# Mandatory, Allowed values are: swift, aws-s3
objectstorage.provider=swift

# ========================================= ObjectStorage Buckets ==========================================
# bucket names prefix
# Optional, default no prefix
# objectstorage.bucketPrefix=prod-

# Default bucket name
# Optional, default is bucketPrefix + `default`
# objectstorage.namespace=james

# ========================================= ObjectStorage on Swift =========================================
# Specify the geography region which the BlobStore will connect to a in Swift ObjectStorage
# Optional, possible values are those of your Swift service
# objectstorage.swift.region=HKG

# Specify the authentication mechanism of Swift
# Mandatory, allowed values are: tmpauth, keystone2, keystone3
objectstorage.swift.authapi=tmpauth

# Mandatory, authentication endpoint
objectstorage.swift.endpoint=http://swift:8080/auth/v1.0

# Openstack Swift authentication mechanisms require you to pass the user information
# to get the access tokens. User information usually include two parts:
# identity: user identification like username
# credential: like password, here it is the Secret Access Key in Jcloud
# Mandatory
objectstorage.swift.credentials=testing

# =================================== ObjectStorage on Swift with Temp Auth ================================
# Mandatory, authentication identity, the identity contains two part, username and tenantname
# Should be the username & tenant name configured in Swift
# Mandatory
objectstorage.swift.tempauth.username=tester
# Mandatory
objectstorage.swift.tempauth.tenantname=test

# Specify http header name for carrying credential information
# Mandatory
objectstorage.swift.tempauth.passheadername=X-Storage-Pass

# Specify http header name for carrying identity information
# Mandatory
objectstorage.swift.tempauth.userheadername=X-Storage-User

# ================================ ObjectStorage on Swift with Keystone 2 Auth ==============================
# Similar to tempAuth
# Mandatory if you choose keystone 2 auth
# objectstorage.swift.keystone2.username=tester
# Mandatory if you choose keystone 2 auth
# objectstorage.swift.keystone2.tenantname=test

# ================================ ObjectStorage on Swift with Keystone 3 Auth ==============================
# Specifying identity information with Keystone 3 Auth
# Mandatory if you choose keystone 3 auth
# objectstorage.swift.keystone3.user.name=demo
# Mandatory if you choose keystone 3 auth
# objectstorage.swift.keystone3.user.domain=Default
# Mandatory if you choose keystone 3 auth
# objectstorage.swift.keystone3.scope.domainid=default

# Specifying project information in KeyStone 3 Auth (similar to tenant in KeyStone 2)
# Optional
# objectstorage.swift.keystone3.scope.project.name=test
# Optional
# objectstorage.swift.keystone3.scope.project.domainname=Default
# Optional
# objectstorage.swift.keystone3.scope.project.domainid=default

# ========================================= ObjectStorage on S3 =============================================
# Mandatory if you choose aws-s3 storage service, S3 authentication endpoint
# objectstorage.s3.endPoint=http://james-s3:8000

# Mandatory if you choose aws-s3 storage service, access key id configured in S3
# objectstorage.s3.accessKeyId=accessKey

# Mandatory if you choose aws-s3 storage service, secret key configured in S3
# objectstorage.s3.secretKey=secretKey

# ============================================ Blobs Exporting ==============================================
# Read https://james.apache.org/server/config-blob-export.html for further details

# Choosing blob exporting mechanism, allowed mechanism are: localFile, linshare
# LinShare is a file sharing service, will be explained in the below section
# Optional, default is localFile
blob.export.implementation=localFile

# ======================================= Local File Blobs Exporting ========================================
# Optional, directory to store exported blob, directory path follows James file system format
# default is file://var/blobExporting
blob.export.localFile.directory=file://var/blobExporting

# ======================================= LinShare File Blobs Exporting ========================================
# LinShare is a sharing service where you can use james, connects to an existing LinShare server and shares files to
# other mail addresses as long as those addresses available in LinShare. For example you can deploy James and LinShare
# sharing the same LDAP repository
# Mandatory if you choose LinShare, url to connect to LinShare service
# blob.export.linshare.url=http://linshare:8080

# ======================================= LinShare Configuration BasicAuthentication ===================================
# Authentication is mandatory if you choose LinShare, TechnicalAccount is need to connect to LinShare specific service.
# For Example: It will be formalized to 'Authorization: Basic {Credential of UUID/password}'

# blob.export.linshare.technical.account.uuid=Technical_Account_UUID
# blob.export.linshare.technical.account.password=password
