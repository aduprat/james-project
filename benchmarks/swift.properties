# ============================================= BlobStore Implementation ==================================
# Read https://james.apache.org/server/config-blobstore.html for further details

# Choose your BlobStore implementation
# Mandatory, allowed values are: cassandra, objectstorage, hybrid
# hybrid is using both objectstorage for unfrequently read or big blobs & cassandra for small, often read blobs
implementation=objectstorage

# ============================================== ObjectStorage ============================================

# ========================================= ObjectStorage Codec ======================================
# Codec for blob contents
# Mandatory, allowed values are: DEFAULT, AES256
# DEFAULT: no encryption
# AES256: AES-256 encryption
objectstorage.payload.codec=DEFAULT

# ===================================== ObjectStorage AES256 Encryption ====================================
# Mandatory if you choose AES256 encryption, salt value in string for the encryption
# objectstorage.aes256.hexsalt=salt

# Mandatory if you choose AES256 encryption, password for the encryption
# objectstorage.aes256.password=password

# ========================================= ObjectStorage providers ========================================
# Choosing blob storage service
# Mandatory, Allowed values are: swift, aws-s3
objectstorage.provider=swift

# ========================================= ObjectStorage Buckets ==========================================
# bucket names prefix
# Optional, default no prefix
# objectstorage.bucketPrefix=prod-

# Default bucket name
# Optional, default is bucketPrefix + `default`
objectstorage.namespace=${env:OS_NAMESPACE}

# ========================================= ObjectStorage on Swift =========================================
# Specify the geography region which the BlobStore will connect to a in Swift ObjectStorage
# Optional, possible values are those of your Swift service
# objectstorage.swift.region=HKG

# Specify the authentication mechanism of Swift
# Mandatory, allowed values are: tmpauth, keystone2, keystone3
objectstorage.swift.authapi=keystone3

# Mandatory, authentication endpoint
objectstorage.swift.endpoint=${env:OS_SWIFT_ENDPOINT}

# Openstack Swift authentication mechanisms require you to pass the user information
# to get the access tokens. User information usually include two parts:
# identity: user identification like username
# credential: like password, here it is the Secret Access Key in Jcloud
# Mandatory
objectstorage.swift.credentials=${env:OS_SWIFT_CREDENTIALS}

# =================================== ObjectStorage on Swift with Temp Auth ================================
# Mandatory, authentication identity, the identity contains two part, username and tenantname
# Should be the username & tenant name configured in Swift
# Mandatory
objectstorage.swift.keystone3.user.name=${env:OS_SWIFT_USER_NAME}
# Mandatory
objectstorage.swift.keystone3.user.domain=${env:OS_SWIFT_USER_DOMAIN}

# ================================ ObjectStorage on Swift with Keystone 3 Auth ==============================
objectstorage.swift.keystone3.scope.domainid=${env:OS_SWIFT_DOMAIN_ID}
objectstorage.swift.keystone3.scope.project.domainid=${env:OS_SWIFT_PROJECT_DOMAIN_ID}
objectstorage.swift.keystone3.scope.project.name=${env:OS_SWIFT_PROJECT_DOMAIN_NAME}

# ============================================ Blobs Exporting ==============================================
# Read https://james.apache.org/server/config-blob-export.html for further details

# Choosing blob exporting mechanism, allowed mechanism are: localFile, linshare
# LinShare is a file sharing service, will be explained in the below section
# Optional, default is localFile
blob.export.implementation=localFile

# ======================================= Local File Blobs Exporting ========================================
# Optional, directory to store exported blob, directory path follows James file system format
# default is file://var/blobExporting
blob.export.localFile.directory=file://var/blobExporting

# ======================================= LinShare File Blobs Exporting ========================================
# LinShare is a sharing service where you can use james, connects to an existing LinShare server and shares files to
# other mail addresses as long as those addresses available in LinShare. For example you can deploy James and LinShare
# sharing the same LDAP repository
# Mandatory if you choose LinShare, url to connect to LinShare service
# blob.export.linshare.url=http://linshare:8080

# ======================================= LinShare Configuration BasicAuthentication ===================================
# Authentication is mandatory if you choose LinShare, TechnicalAccount is need to connect to LinShare specific service.
# For Example: It will be formalized to 'Authorization: Basic {Credential of UUID/password}'

# blob.export.linshare.technical.account.uuid=Technical_Account_UUID
# blob.export.linshare.technical.account.password=password
