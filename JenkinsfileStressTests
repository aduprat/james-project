def maxRetries = 120
def waitForCommandSuccess(command, maxRetries) {
    def tries = 0;
    while (tries++ < maxRetries) {
        try {
            sh command
            return true
        } catch (Exception e) {
            if (tries >= maxRetries) {
                throw new Exception("${} tries exceeded. ${command} failed.", e)
            }
            sh "sleep 1"
        }
    }
}

pipeline {
    agent { label 'my-slave' }

    tools {
        maven 'maven'
    }

    stages {
        stage('Compile') {
            steps {
                sh "mvn clean install -DskipTests"
            }
        }
        stage('Build image') {
            steps {
                script {
                    docker.withTool('docker') {
                        sh "cp server/container/guice/cassandra-rabbitmq-guice/target/james-server-cassandra-rabbitmq-guice.jar dockerfiles/run/guice/cassandra-rabbitmq/destination"
                        sh "cp -r server/container/guice/cassandra-rabbitmq-guice/target/james-server-cassandra-rabbitmq-guice.lib dockerfiles/run/guice/cassandra-rabbitmq/destination"
                        sh "cp server/container/cli/target/james-server-cli.jar dockerfiles/run/guice/cassandra-rabbitmq/destination"
                        sh "cp -r server/container/cli/target/james-server-cli.lib dockerfiles/run/guice/cassandra-rabbitmq/destination"
                        sh "docker build -t james_run dockerfiles/run/guice/cassandra-rabbitmq"
                    }
                }
            }
        }
        stage('Start James') {
            steps {
                script {
                    docker.withTool('docker') {
                        sh "docker run -d --name=cassandra cassandra:3.11.3"
                        sh "docker run -d --name=rabbitmq rabbitmq:3.7.7-management"
                        sh "docker run -d --name=elasticsearch elasticsearch:2.4.6"
                        try {
                            waitForCommandSuccess("docker exec cassandra cqlsh -e 'describe columnfamily system.local;'", maxRetries)
                        } catch (Exception e) {
                            sh "docker logs cassandra"
                        }

                        sh "docker run -d --hostname HOSTNAME -p 25:25 -p 8081:80 -p 110:110 -p 143:143 -p 465:465 -p 587:587 -p 993:993 --link cassandra:cassandra --link rabbitmq:rabbitmq --link elasticsearch:elasticsearch --name james_run -t james_run"
                        try {
                            def jamesCliWithOptions = 'java -jar /root/james-cli.jar -h 127.0.0.1'
                            waitForCommandSuccess("docker exec james_run ${jamesCliWithOptions} listusers", maxRetries)
                        } catch (Exception e) {
                            sh "docker logs james_run"
                        }
                    }
                }
            }
        }
        stage('Run Gatling test') {
            steps {
                build job: 'Gatling job', parameters: [[$class: 'StringParameterValue', name: 'SBT_ACTION', value: "gatling:testOnly  ${params.SCENARIO}"]]
            }
        }
    }

    post {
        always {
            script {
                docker.withTool('docker') {
                    sh "docker rm -f cassandra rabbitmq elasticsearch james_run"
                }
            }
        }
    }
}
